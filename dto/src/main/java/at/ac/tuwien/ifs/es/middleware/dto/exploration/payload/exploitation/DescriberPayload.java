package at.ac.tuwien.ifs.es.middleware.dto.exploration.payload.exploitation;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.util.BlankOrIRIJsonUtil;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.rdf.api.BlankNodeOrIRI;

/**
 * This class is a POJO for the parameters expected by the resource describer operator. This is
 * simply a list of properties that shall be considered. However, this argument is optional and per
 * default {@code rdfs:label} and {@code rdfs:comment} are considered.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
public final class DescriberPayload implements Serializable {

  private List<String> languages;
  private Map<String, DescribePropertyPayload> properties;

  @JsonCreator
  public DescriberPayload(@JsonProperty(value = "languages") List<String> languages,
      @JsonProperty(value = "properties") Map<String, DescribePropertyPayload> properties) {
    this.languages = languages == null || languages.isEmpty() ? Arrays.asList("", "en") : languages;
    if (properties == null || properties.isEmpty()) {
      this.properties = new HashMap<>();
      this.properties.put("label", new DescribePropertyPayload(
          BlankOrIRIJsonUtil.valueOf("http://www.w3.org/2000/01/rdf-schema#label")));
      this.properties.put("description", new DescribePropertyPayload(
          BlankOrIRIJsonUtil.valueOf("http://www.w3.org/2000/01/rdf-schema#comment")));
    } else {
      this.properties = properties;
    }
  }

  public Map<String, DescribePropertyPayload> getProperties() {
    return properties;
  }

  public List<String> getLanguages() {
    return languages;
  }

  @Override
  public String toString() {
    return "DescriberPayload{" +
        "languages=" + languages +
        ", properties=" + properties +
        '}';
  }

  public class DescribePropertyPayload {

    private BlankNodeOrIRI property;
    private List<String> languages;

    public DescribePropertyPayload(BlankNodeOrIRI property) {
      this.property = property;
    }

    @JsonCreator
    public DescribePropertyPayload(
        @JsonProperty(value = "property", required = true) BlankNodeOrIRI property,
        @JsonProperty("languages") List<String> languages) {
      this.property = property;
      this.languages = languages;
    }


    public BlankNodeOrIRI getProperty() {
      return property;
    }

    public List<String> getLanguages() {
      return languages == null || languages.isEmpty() ? DescriberPayload.this.getLanguages()
          : languages;
    }

    @Override
    public String toString() {
      return "DescribePropertyPayload{" +
          ", property=" + property +
          ", languages=" + languages +
          '}';
    }
  }
}
