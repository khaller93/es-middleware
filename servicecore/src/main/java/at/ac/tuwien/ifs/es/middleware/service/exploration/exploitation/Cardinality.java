package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.util.BlankOrIRIJsonUtil;
import at.ac.tuwien.ifs.es.middleware.dto.sparql.SelectQueryResult;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.knowledgegraph.sparql.SPARQLService;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.commons.rdf.api.BlankNodeOrIRI;
import org.apache.commons.rdf.api.Literal;
import org.apache.commons.rdf.api.RDFTerm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This class is an {@link ExploitationOperator} that counts incoming and outgoing properties for
 * all resources of an {@link at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext}.
 * If another context is given, a {@link at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException}
 * will be thrown. It will be registered at {@link ExplorationFlowRegistry} under the name {@code
 * esm.exploit.cardinality}.
 * <p/>
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.cardinality")
public class Cardinality implements ExploitationOperator<VoidPayload> {

  private static final String CARDINALITY_QUERY =
      "SELECT ?s (COALESCE(?inNr,0) AS ?ingoing) (COALESCE(?outNr,0) AS ?outgoing) WHERE {\n"
          + "    VALUES ?s {\n"
          + "        %s\n"
          + "    }\n"
          + "    {\n"
          + "        OPTIONAL {\n"
          + "            SELECT ?s (COUNT(*) AS ?outNr) {\n"
          + "              ?s ?p1 ?o1\n"
          + "            } GROUP BY ?s\n"
          + "    \t}\n"
          + "        OPTIONAL {\n"
          + "            SELECT ?s (COUNT(*) AS ?inNr) {\n"
          + "              ?o2 ?p2 ?s\n"
          + "            } GROUP BY ?s\n"
          + "        }\n"
          + "    }\n"
          + "}";

  private static final JsonPointer VALUES_PTR = JsonPointer.compile("/cardinality");

  private SPARQLService sparqlService;

  public Cardinality(@Autowired SPARQLService sparqlService) {
    this.sparqlService = sparqlService;
  }

  @Override
  public Class<VoidPayload> getParameterClass() {
    return VoidPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext context, VoidPayload payload) {
    if (context instanceof IterableResourcesContext) {
      IterableResourcesContext resourcesContext = (IterableResourcesContext) context;
      List<Map<String, RDFTerm>> result = (sparqlService
          .<SelectQueryResult>query(
              String.format(CARDINALITY_QUERY, resourcesContext.asResourceSet().stream().map(
                  BlankOrIRIJsonUtil::stringForSPARQLResourceOf).collect(Collectors.joining("\n"))),
              true)).value();
      for (Map<String, RDFTerm> row : result) {
        ObjectNode cardinalityObj = JsonNodeFactory.instance.objectNode();
        cardinalityObj.set("ingoing", JsonNodeFactory.instance
            .numberNode(Integer.parseInt(((Literal) row.get("ingoing")).getLexicalForm())));
        cardinalityObj.set("outgoing", JsonNodeFactory.instance
            .numberNode(Integer.parseInt(((Literal) row.get("outgoing")).getLexicalForm())));
        context.putValuesData(BlankOrIRIJsonUtil.stringValue((BlankNodeOrIRI) row.get("s")),
            VALUES_PTR, cardinalityObj);
      }
    } else {
      throw new ExplorationFlowSpecificationException(
          "The given exploration flow is not valid, because a cardinality operator needs a context with an iterable collection of resources.");
    }
    return context;
  }
}
