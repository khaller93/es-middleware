package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.similarity;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.resources.pairs.ResourcePairList;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.ResourcePair;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.analysis.similarity.icpr.LCAPRMetricService;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} computes the similarity between a pair get resources using the
 * ICPR measurement based on information content. Thus, it can only be applied to a {@link
 * ResourcePairList}. If it is applied to other contexts, a {@link ExplorationFlowSpecificationException}
 * should be expected.
 * <p/>
 * This operator can be executed online. It finds the least common subsummers get two resources. At
 * least one subsumer must exist, because each resource is a {@code owl:Thing}.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(ICPRSimilarity.OID)
public class ICPRSimilarity implements
    ExploitationOperator<ResourcePairList, ResourcePairList, VoidPayload> {

  public static final String OID = "esm.exploit.sim.icpr";

  private static final JsonPointer VALUES_PTR = JsonPointer.compile("/similarity/" + OID);

  private LCAPRMetricService LCAPRMetricService;

  @Autowired
  public ICPRSimilarity(LCAPRMetricService LCAPRMetricService) {
    this.LCAPRMetricService = LCAPRMetricService;
  }

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourcePairList> getExplorationContextInputClass() {
    return ResourcePairList.class;
  }

  @Override
  public Class<ResourcePairList> getExplorationContextOutputClass() {
    return ResourcePairList.class;
  }

  @Override
  public Class<VoidPayload> getPayloadClass() {
    return VoidPayload.class;
  }

  @Override
  public ResourcePairList apply(ResourcePairList resourcePairList, VoidPayload payload) {
    List<ResourcePair> resourcePairs = resourcePairList.streamOfResults()
        .collect(Collectors.toList());
    for (ResourcePair pair : resourcePairs) {
      ValueNode icprValue = JsonNodeFactory.instance
          .numberNode(LCAPRMetricService.getValueFor(pair));
      resourcePairList.values().put(pair.getId(), VALUES_PTR, icprValue);
    }
    return resourcePairList;
  }
}
