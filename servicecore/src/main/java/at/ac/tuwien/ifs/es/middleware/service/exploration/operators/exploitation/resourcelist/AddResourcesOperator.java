package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.resourcelist;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.resources.ResourceList;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.resources.Resource;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.acquisition.AddResourcesPayload;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import java.util.List;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This is an implementation of {@link ExploitationOperator} that adds resources to a {@link
 * ResourceList}.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(AddResourcesOperator.OID)
public class AddResourcesOperator implements
    ExploitationOperator<ResourceList, ResourceList, AddResourcesPayload> {

  public static final String OID = "esm.source.resourcelist.add";

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourceList> getExplorationContextInputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<ResourceList> getExplorationContextOutputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<AddResourcesPayload> getPayloadClass() {
    return AddResourcesPayload.class;
  }

  @Override
  public ResourceList apply(ResourceList resourceList, AddResourcesPayload payload) {
    /* add to resource list */
    if (payload.getIndex() == -1) {
      for (Resource resourceToAdd : payload.getResources()) {
        resourceList.add(resourceToAdd);
      }
    } else {
      List<Resource> resourcesToAdd = payload.getResources();
      int index = payload.getIndex();
      for (int i = 0; i < resourcesToAdd.size(); i++) {
        resourceList.add(index + i, resourcesToAdd.get(i));
      }
    }
    /* remove duplicates of resources in given list to add */
    if (payload.getNodup()) {
      resourceList = (ResourceList) resourceList.streamOfResults()
          .distinct().collect(resourceList.collector());
    }
    return resourceList;
  }
}
