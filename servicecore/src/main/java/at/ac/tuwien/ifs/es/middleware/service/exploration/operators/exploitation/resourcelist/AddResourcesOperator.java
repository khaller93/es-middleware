package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.resourcelist;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ResourceList;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.Resource;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.acquisition.AddResourcesPayload;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This is an implementation of {@link ExploitationOperator} that adds resources to a {@link
 * ResourceList}.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(AddResourcesOperator.OID)
public class AddResourcesOperator implements
    ExploitationOperator<ResourceList, ResourceList, AddResourcesPayload> {

  public static final String OID = "esm.source.resourcelist.add";

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourceList> getExplorationContextInputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<ResourceList> getExplorationContextOutputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<AddResourcesPayload> getPayloadClass() {
    return AddResourcesPayload.class;
  }

  @Override
  public ResourceList apply(ResourceList resourceListContext, AddResourcesPayload payload) {
    List<Resource> resourcesToAdd =
        payload.getResources() != null ? payload.getResources() : Collections.emptyList();
    if (payload.getNodup()) {
      Set<Resource> resourceSet = resourceListContext.asResourceSet();
      resourcesToAdd = resourcesToAdd.stream().filter(r -> !resourceSet.contains(r))
          .collect(Collectors.toList());
    }
    List<Resource> resourceList = resourceListContext.asResourceList();
    if (payload.getIndex() == -1) {
      resourceList.addAll(resourcesToAdd);
    } else {
      resourceList.addAll(payload.getIndex(), resourcesToAdd);
    }
    return (ResourceList) resourceList.stream().collect(resourceListContext);
  }
}
