package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.payload.exploitation.DescriberPayload;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.sparql.SPARQLService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This exploitation operation can be used to get the description of resources in a {@link
 * IterableResourcesContext}. If another context is passed, this operation cannot be executed and a
 * {@link ExplorationFlowSpecificationException} will be thrown. It will be registered at {@link
 * ExplorationFlowRegistry} under the name {@code esm.exploit.describe}.
 * <p/>
 * Per default the label ({@code rdfs:label}) and comment ({@code comment}) will be considered for
 * describing a resource. However, this can be changed with the parameter {@code properties}, which
 * is an JSON array of property IRIs.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.describe")
public class ResourceDescriber implements ExploitationOperator<DescriberPayload> {

  private static final Logger logger = LoggerFactory.getLogger(ResourceDescriber.class);

  private SPARQLService sparqlService;
  private ObjectMapper parameterMapper;

  public ResourceDescriber(@Autowired SPARQLService sparqlService,
      @Autowired ObjectMapper parameterMapper) {
    this.sparqlService = sparqlService;
    this.parameterMapper = parameterMapper;
  }

  @Override
  public Class<DescriberPayload> getParameterClass() {
    return DescriberPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext context, DescriberPayload payload) {
    //TODO: implement
    return context;
  }

}
