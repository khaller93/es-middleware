package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.IterableResourcesContext;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.sparql.SPARQLService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Arrays;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This exploitation operation can be used to get the description of resources in a {@link
 * IterableResourcesContext}. If another context is passed, this operation cannot be executed and a
 * {@link ExplorationFlowSpecificationException} will be thrown. It will be registered at {@link
 * ExplorationFlowRegistry} under the name {@code esm.exploit.describe}.
 * <p/>
 * Per default the label ({@code rdfs:label}) and comment ({@code comment}) will be considered for
 * describing a resource. However, this can be changed with the parameter {@code properties}, which
 * is an JSON array of property IRIs.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.describe")
public class ResourceDescriber implements ExploitationOperator {

  private static final Logger logger = LoggerFactory.getLogger(ResourceDescriber.class);

  private SPARQLService sparqlService;
  private ObjectMapper parameterMapper;

  public ResourceDescriber(@Autowired SPARQLService sparqlService,
      @Autowired ObjectMapper parameterMapper) {
    this.sparqlService = sparqlService;
    this.parameterMapper = parameterMapper;
  }

  @Override
  public Class<DescriberParameterPayload> getParameterClass() {
    return DescriberParameterPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext explorationContext, JsonNode parameterMap) {
    if (explorationContext instanceof IterableResourcesContext) {
      IterableResourcesContext itResourceCtxt = (IterableResourcesContext) explorationContext;
      try {
        DescriberParameterPayload describerParameterPayload = parameterMapper
            .treeToValue(parameterMap, getParameterClass());
        //TODO: Implement
        return explorationContext;
      } catch (JsonProcessingException e) {
        throw new ExplorationFlowSpecificationException(
            "The given resource describer arguments is invalid.", e);
      }
    } else {
      throw new ExplorationFlowSpecificationException(
          "In order to describe resources, a source with iterable resources is required.");
    }
  }

  /**
   * This class is a POJO for the parameters expected by this {@link ResourceDescriber}. This is
   * simply a list of properties that shall be considered. However, this argument is optional and
   * per default {@code rdfs:label} and {@code rdfs:comment} are considered.
   */
  public static final class DescriberParameterPayload {

    private List<String> properties = Arrays.asList("http://www.w3.org/2000/01/rdf-schema#label",
        "http://www.w3.org/2000/01/rdf-schema#comment");

    public void setProperties(List<String> properties) {
      this.properties = properties;
    }

    public List<String> getProperties() {
      return properties;
    }

    @Override
    public String toString() {
      return "DescriberParameter{" +
          "properties=" + properties +
          '}';
    }
  }
}
