package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.resources.ResourceCollection;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.util.RDFTermJsonUtil;
import at.ac.tuwien.ifs.es.middleware.dto.sparql.SelectQueryResult;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.FacetPropertyPayload;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.knowledgegraph.sparql.SPARQLService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import org.apache.commons.lang.text.StrSubstitutor;
import org.apache.commons.rdf.api.BlankNodeOrIRI;
import org.apache.commons.rdf.api.Literal;
import org.apache.commons.rdf.api.RDFTerm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(FacetPropertyDescriber.OID)
public class FacetPropertyDescriber implements
    ExploitationOperator<ResourceCollection, ResourceCollection, FacetPropertyPayload> {

  public static final String OID = "esm.exploit.facet.property";

  private static final String FACET_PROP_QUERY =
      "SELECT ?p ?v (count(DISTINCT ?s) as ?cnt) WHERE {\n"
          + "    VALUES ?s {\n"
          + "       ${resourceList} \n"
          + "    }\n"
          + "    VALUES ?p {\n"
          + "       ${propertyList} \n"
          + "    }\n"
          + "    ?s ?p ?v .\n"
          + "    FILTER(isIRI(?v) || isLiteral(?v))\n"
          + "} GROUP BY ?p ?v";

  private final SPARQLService sparqlService;
  private final ObjectMapper objectMapper;

  @Autowired
  public FacetPropertyDescriber(SPARQLService sparqlService, ObjectMapper objectMapper) {
    this.sparqlService = sparqlService;
    this.objectMapper = objectMapper;
  }

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourceCollection> getExplorationContextInputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<ResourceCollection> getExplorationContextOutputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<FacetPropertyPayload> getPayloadClass() {
    return FacetPropertyPayload.class;
  }

  @Override
  public ResourceCollection apply(ResourceCollection context, FacetPropertyPayload payload) {
    Map<String, String> valueMap = new HashMap<>();
    valueMap
        .put("resourceList", context.asResourceSet().stream().map(
            RDFTermJsonUtil::stringForSPARQLResourceOf).collect(Collectors.joining("\n")));
    valueMap
        .put("propertyList", payload.getProperties().stream().map(
            RDFTermJsonUtil::stringForSPARQLResourceOf).collect(Collectors.joining("\n")));
    List<Map<String, RDFTerm>> result = sparqlService.<SelectQueryResult>query(
        new StrSubstitutor(valueMap).replace(FACET_PROP_QUERY),
        true).value();
    /* process the result */
    Map<String, ArrayNode> facetMap = new HashMap<>();
    for (Map<String, RDFTerm> row : result) {
      ArrayNode propertyValueArrayNode = facetMap
          .compute(RDFTermJsonUtil.stringValue((BlankNodeOrIRI) row.get("p")),
              (s, propertyNode1) -> propertyNode1 != null ? propertyNode1
                  : JsonNodeFactory.instance.arrayNode());
      /* create value node for the rdf term (literal or IRI) */
      ObjectNode valueNode = JsonNodeFactory.instance.objectNode();
      RDFTerm valueTerm = row.get("v");
      Integer totalNumber = Integer.parseInt(((Literal) row.get("cnt")).getLexicalForm());
      if (valueTerm instanceof Literal) {
        valueNode.set("type", JsonNodeFactory.instance.textNode("literal"));
        valueNode.set("literal", objectMapper.valueToTree(valueTerm));
        valueNode.set("total", JsonNodeFactory.instance.numberNode(totalNumber));
      } else {
        valueNode.set("type", JsonNodeFactory.instance.textNode("iri"));
        valueNode.set("iri", objectMapper.valueToTree(valueTerm));
        valueNode.set("total", JsonNodeFactory.instance.numberNode(totalNumber));
      }
      propertyValueArrayNode.add(valueNode);
    }
    /* add processed result to context */
    ObjectNode facetNode = JsonNodeFactory.instance.objectNode();
    for (Entry<String, ArrayNode> valueArrayEntry : facetMap.entrySet()) {
      facetNode.set(valueArrayEntry.getKey(), valueArrayEntry.getValue());
    }
    context.metadata().put("facet", facetNode);
    return context;
  }
}
