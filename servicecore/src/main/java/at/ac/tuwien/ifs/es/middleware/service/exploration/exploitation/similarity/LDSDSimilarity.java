package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.similarity;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ResourcePairList;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.ResourcePair;
import at.ac.tuwien.ifs.es.middleware.service.exploration.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.analysis.similarity.ldsd.LinkedDataSemanticDistanceMetricService;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowServiceException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import java.util.List;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.sim.ldsd")
public class LDSDSimilarity implements ExploitationOperator<VoidPayload> {

  private static final Logger logger = LoggerFactory.getLogger(LDSDSimilarity.class);

  private static final JsonPointer VALUES_PTR = JsonPointer
      .compile("/similarity/esm.exploit.sim.ldsd");

  private LinkedDataSemanticDistanceMetricService ldsdMetricService;

  @Autowired
  public LDSDSimilarity(LinkedDataSemanticDistanceMetricService ldsdMetricService) {
    this.ldsdMetricService = ldsdMetricService;
  }

  @Override
  public Class<VoidPayload> getParameterClass() {
    return VoidPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext context, VoidPayload payload) {
    logger.debug("Computation of LDSD similarity was requested.");
    if (context instanceof ResourcePairList) {
      ResourcePairList resourcePairList = (ResourcePairList) context;
      List<ResourcePair> resourcePairs = resourcePairList.streamOfResults()
          .collect(Collectors.toList());
      for (ResourcePair resource : resourcePairs) {
        ValueNode ldsdValue = JsonNodeFactory.instance
            .numberNode(ldsdMetricService.getValueFor(resource));
        context.putValuesData(resource.getId(), VALUES_PTR, ldsdValue);
      }
      return context;
    } else {
      throw new ExplorationFlowServiceException(
          "The LDSD similarity can only be applied to a list of resource pairings.");
    }
  }
}