package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.centrality;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.Resource;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowServiceException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.knowledgegraph.CentralityMetricsService;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} implements the closeness centrality measure. It is applicable
 * to {@link at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext}. It
 * will be registered at {@link ExplorationFlowRegistry} under the name {@code
 * esm.exploit.centrality.closeness}.
 * <p/>
 * This operator uses the {@link CentralityMetricsService} with pre-computed closeness measures for
 * the vertices in the knowledge graph.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.centrality.closeness")
public class Closeness implements ExploitationOperator<VoidPayload> {

  private static final Logger logger = LoggerFactory.getLogger(Betweeness.class);

  private static final JsonPointer VALUES_PTR = JsonPointer
      .compile("/centrality/esm.exploit.centrality.closeness");

  private CentralityMetricsService centralityMetricsService;

  public Closeness(@Autowired CentralityMetricsService centralityMetricsService) {
    this.centralityMetricsService = centralityMetricsService;
  }

  @Override
  public Class<VoidPayload> getParameterClass() {
    return VoidPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext context, VoidPayload payload) {
    logger.debug("Applies closeness to the given context {}.", context);
    if (context instanceof IterableResourcesContext) {
      for (Resource resource : ((IterableResourcesContext) context).asResourceSet()) {
        ValueNode degreeValue = JsonNodeFactory.instance
            .numberNode(centralityMetricsService.getClosenessOf(resource));
        context.putValuesData(resource.getId(), VALUES_PTR, degreeValue);
      }
      return context;
    } else {
      throw new ExplorationFlowServiceException(
          "The closeness centrality requires a context of iterable resources.");
    }
  }

}
