package at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.similarity;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ExplorationContext;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ResourcePairList;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.ResourcePair;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowServiceException;
import at.ac.tuwien.ifs.es.middleware.service.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import java.util.List;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} computes the similarity between a pair of resources using the
 * Resnik measurement based on information content. Thus, it can only be applied to a {@link
 * ResourcePairList}. If it is applied to other contexts, a {@link ExplorationFlowSpecificationException}
 * should be expected.
 * <p/>
 * This operator can be executed online. It finds the least common subsumers of two resources. At
 * least one subsumer must exist, because each resource is a {@code owl:Thing}. Then the information
 * content is computed for each of the subsumers. Information content is a measurement for
 * uncertainty and thus informational value. It represents the likelihood of picking an instance of
 * this subsumer, when randomly picking one instance from the whole data. The resnik similarity for
 * a pair of resources is then the maximum of all subsumers.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.sim.resnik")
public class ResnikSimilarity implements ExploitationOperator<VoidPayload> {

  private static final Logger logger = LoggerFactory.getLogger(ResnikSimilarity.class);

  @Override
  public Class<VoidPayload> getParameterClass() {
    return VoidPayload.class;
  }

  @Override
  public ExplorationContext apply(ExplorationContext context, VoidPayload payload) {
    logger.debug("Computation of resnik similarity was requested.");
    if (context instanceof ResourcePairList) {
      ResourcePairList resourcePairList = (ResourcePairList) context;
      List<ResourcePair> resourcePairs = resourcePairList.streamOfResults()
          .collect(Collectors.toList());

      return context;
    } else {
      throw new ExplorationFlowServiceException(
          "The Resnik similarity can only be applied to a list of resource pairings.");
    }

  }
}
