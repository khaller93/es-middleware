package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.centrality;

import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.ResourceCollection;
import at.ac.tuwien.ifs.es.middleware.dto.exploration.context.result.Resource;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.analysis.centrality.degree.DegreeCentralityMetricService;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.RegisterForExplorationFlow;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} implements the degree centrality measure. It is applicable to
 * {@link at.ac.tuwien.ifs.es.middleware.dto.exploration.context.IterableResourcesContext}. It will
 * be registered at {@link ExplorationFlowRegistry} under the name {@code
 * esm.exploit.centrality.degree}.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow("esm.exploit.centrality.degree")
public class Degree implements
    ExploitationOperator<ResourceCollection, ResourceCollection, VoidPayload> {

  private static final JsonPointer VALUES_PTR = JsonPointer
      .compile("/centrality/esm.exploit.centrality.degree");

  private DegreeCentralityMetricService degreeCentralityMetricService;

  public Degree(@Autowired DegreeCentralityMetricService degreeCentralityMetricService) {
    this.degreeCentralityMetricService = degreeCentralityMetricService;
  }

  @Override
  public String getUID() {
    return "esm.exploit.centrality.degree";
  }

  @Override
  public Class<ResourceCollection> getExplorationContextInputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<ResourceCollection> getExplorationContextOutputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<VoidPayload> getPayloadClass() {
    return VoidPayload.class;
  }

  @Override
  public ResourceCollection apply(ResourceCollection context, VoidPayload payload) {
    for (Resource resource : context.asResourceSet()) {
      ValueNode degreeValue = JsonNodeFactory.instance
          .numberNode(degreeCentralityMetricService.getValueFor(resource));
      context.putValuesData(resource.getId(), VALUES_PTR, degreeValue);
    }
    return context;
  }
}
