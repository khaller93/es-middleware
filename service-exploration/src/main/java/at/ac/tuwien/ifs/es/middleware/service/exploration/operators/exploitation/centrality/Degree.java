package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.centrality;

import at.ac.tuwien.ifs.es.middleware.service.exploration.context.IterableResourcesContext;
import at.ac.tuwien.ifs.es.middleware.service.exploration.context.resources.ResourceCollection;
import at.ac.tuwien.ifs.es.middleware.kg.abstraction.rdf.Resource;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.analysis.centrality.degree.DegreeCentralityMetricService;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.registry.ExplorationFlowRegistry;
import at.ac.tuwien.ifs.es.middleware.service.exploration.RegisterForExplorationFlow;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} implements the degree centrality measure. It is applicable to
 * {@link IterableResourcesContext}. It will be registered at {@link ExplorationFlowRegistry} under
 * the name {@code esm.exploit.centrality.degree}.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(Degree.OID)
public class Degree implements
    ExploitationOperator<ResourceCollection, ResourceCollection, VoidPayload> {

  public static final String OID = "esm.exploit.centrality.degree";

  private static final JsonPointer VALUES_PTR = JsonPointer.compile("/centrality/" + OID);

  private final DegreeCentralityMetricService degreeCentralityMetricService;
  private final ObjectMapper objectMapper;

  @Autowired
  public Degree(DegreeCentralityMetricService degreeCentralityMetricService,
      ObjectMapper objectMapper) {
    this.degreeCentralityMetricService = degreeCentralityMetricService;
    this.objectMapper = objectMapper;
  }

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourceCollection> getExplorationContextInputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<ResourceCollection> getExplorationContextOutputClass() {
    return ResourceCollection.class;
  }

  @Override
  public Class<VoidPayload> getPayloadClass() {
    return VoidPayload.class;
  }

  @Override
  public ResourceCollection apply(ResourceCollection context, VoidPayload payload) {
    for (Resource resource : context.asResourceSet()) {
      context.values().put(resource.getId(), VALUES_PTR,
          objectMapper.valueToTree(degreeCentralityMetricService.getValueFor(resource)));
    }
    return context;
  }
}
