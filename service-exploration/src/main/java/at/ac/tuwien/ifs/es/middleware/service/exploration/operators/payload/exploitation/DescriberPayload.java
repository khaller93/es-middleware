package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.exploitation;

import at.ac.tuwien.ifs.es.middleware.kg.abstraction.rdf.Resource;
import at.ac.tuwien.ifs.es.middleware.service.exploration.ExplorationFlowStepPayload;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class is a POJO for the parameters expected by the resource describer operator. This is
 * simply a list get properties that shall be considered. However, this argument is optional and per
 * default {@code rdfs:label} and {@code rdfs:comment} are considered.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
public final class DescriberPayload implements ExplorationFlowStepPayload {

  public static final Resource RDFS_LABEL_PROPERTY = new Resource(
      "http://www.w3.org/2000/01/rdf-schema#label");
  public static final Resource RDFS_COMMENT_PROPERTY = new Resource(
      "http://www.w3.org/2000/01/rdf-schema#comment");

  private Map<String, PropertyPayload> content;

  public DescriberPayload(boolean defaultContent) {
    this.content = defaultContent ? new HashMap<>() : pushDefaultContent(new HashMap<>());
  }

  @JsonCreator
  public DescriberPayload(
      @JsonProperty(value = "content") Map<String, PropertyPayload> properties) {
    this.content =
        (properties == null || properties.isEmpty()) ? pushDefaultContent(new HashMap<>())
            : properties;
  }

  private Map<String, PropertyPayload> pushDefaultContent(Map<String, PropertyPayload> contentMap) {
    contentMap.put("label", new TextLiteralPayload(Collections.singletonList(RDFS_LABEL_PROPERTY)));
    contentMap.put("description",
        new TextLiteralPayload(Collections.singletonList(RDFS_COMMENT_PROPERTY)));
    return contentMap;
  }

  public void addTextContent(String name, TextLiteralPayload payload) {
    this.content.put(name, payload);
  }

  public Map<String, PropertyPayload> getContent() {
    return content;
  }

  @Override
  public String toString() {
    return "DescriberPayload{" +
        "content=" + content +
        '}';
  }

  @JsonTypeInfo(
      use = Id.NAME,
      include = JsonTypeInfo.As.PROPERTY,
      property = "@type")
  @JsonSubTypes({
      @Type(value = IRIPayload.class, name = "iri"),
      @Type(value = TextLiteralPayload.class, name = "text")
  })
  public static abstract class PropertyPayload {

    private List<Resource> properties;

    public PropertyPayload(List<Resource> properties) {
      this.properties = properties;
    }

    public List<Resource> getProperties() {
      return properties;
    }

  }

  public static class IRIPayload extends PropertyPayload {

    public IRIPayload(
        @JsonProperty(value = "properties", required = true) List<Resource> property) {
      super(property);
    }

    @Override
    public String toString() {
      return "ResourceProperty{" +
          "property=" + getProperties() +
          '}';
    }
  }

  public static class TextLiteralPayload extends PropertyPayload {

    private List<String> languages;

    public TextLiteralPayload() {
      this(Collections.emptyList());
    }

    public TextLiteralPayload(List<Resource> property) {
      this(property, Arrays.asList("default", "en"));
    }

    public TextLiteralPayload(
        @JsonProperty(value = "properties", required = true) List<Resource> properties,
        @JsonProperty(value = "languages") List<String> languages) {
      super(properties);
      this.languages = languages != null ? languages : Arrays.asList("default", "en");
    }

    public void setLanguages(List<String> languages) {
      this.languages = languages;
    }

    public List<String> getLanguages() {
      return languages;
    }

    @Override
    public String toString() {
      return "DescribePropertyPayload{" +
          ", property=" + getProperties() +
          ", languages=" + languages +
          '}';
    }
  }
}
