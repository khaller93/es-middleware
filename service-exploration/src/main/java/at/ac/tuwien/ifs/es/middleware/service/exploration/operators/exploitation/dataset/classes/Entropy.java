package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.dataset.classes;

import at.ac.tuwien.ifs.es.middleware.kg.abstraction.rdf.Resource;
import at.ac.tuwien.ifs.es.middleware.service.analysis.dataset.classes.ClassEntropyService;
import at.ac.tuwien.ifs.es.middleware.service.analysis.value.normalization.DecimalNormalizedAnalysisValue;
import at.ac.tuwien.ifs.es.middleware.service.exploration.RegisterForExplorationFlow;
import at.ac.tuwien.ifs.es.middleware.service.exploration.context.resources.ResourceList;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.VoidPayload;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

@Lazy
@Component
@RegisterForExplorationFlow(Entropy.OID)
public class Entropy implements ExploitationOperator<ResourceList, ResourceList, VoidPayload> {

  public static final String OID = "esm.resource.class.entropy";

  private static final JsonPointer dataPointer = JsonPointer.compile("/" + OID);

  private final ClassEntropyService classEntropyService;
  private final ObjectMapper objectMapper;

  @Autowired
  public Entropy(ClassEntropyService classEntropyService, ObjectMapper objectMapper) {
    this.classEntropyService = classEntropyService;
    this.objectMapper = objectMapper;
  }

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourceList> getExplorationContextInputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<ResourceList> getExplorationContextOutputClass() {
    return ResourceList.class;
  }

  @Override
  public Class<VoidPayload> getPayloadClass() {
    return VoidPayload.class;
  }

  @Override
  public ResourceList apply(ResourceList context, VoidPayload payload) {
    for (Resource resource : context) {
      DecimalNormalizedAnalysisValue entropyForClass = classEntropyService
          .getEntropyForClass(resource);
      if (entropyForClass != null) {
        context.values()
            .put(resource.getId(), dataPointer, objectMapper.valueToTree(entropyForClass));
      }
    }
    return context;
  }
}
