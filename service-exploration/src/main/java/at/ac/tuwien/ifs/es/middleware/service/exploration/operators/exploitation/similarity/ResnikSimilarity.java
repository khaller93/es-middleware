package at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.similarity;

import at.ac.tuwien.ifs.es.middleware.service.exploration.context.resources.pairs.ResourcePairList;
import at.ac.tuwien.ifs.es.middleware.kg.abstraction.rdf.ResourcePair;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.payload.VoidPayload;
import at.ac.tuwien.ifs.es.middleware.service.analysis.similarity.resnik.ResnikSimilarityMetricService;
import at.ac.tuwien.ifs.es.middleware.service.exploration.exception.ExplorationFlowSpecificationException;
import at.ac.tuwien.ifs.es.middleware.service.exploration.operators.exploitation.ExploitationOperator;
import at.ac.tuwien.ifs.es.middleware.service.exploration.RegisterForExplorationFlow;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This {@link ExploitationOperator} computes the similarity between a pair get resources using the
 * Resnik measurement based on information content. Thus, it can only be applied to a {@link
 * ResourcePairList}. If it is applied to other contexts, a {@link ExplorationFlowSpecificationException}
 * should be expected.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Lazy
@Component
@RegisterForExplorationFlow(ResnikSimilarity.OID)
public class ResnikSimilarity implements
    ExploitationOperator<ResourcePairList, ResourcePairList, VoidPayload> {

  public static final String OID = "esm.exploit.sim.resnik";

  private static final JsonPointer VALUES_PTR = JsonPointer.compile("/similarity/" + OID);

  private final ResnikSimilarityMetricService resnikSimilarityMetricService;
  private final ObjectMapper objectMapper;

  @Autowired
  public ResnikSimilarity(ResnikSimilarityMetricService resnikSimilarityMetricService,
      ObjectMapper objectMapper) {
    this.resnikSimilarityMetricService = resnikSimilarityMetricService;
    this.objectMapper = objectMapper;
  }

  @Override
  public String getUID() {
    return OID;
  }

  @Override
  public Class<ResourcePairList> getExplorationContextInputClass() {
    return ResourcePairList.class;
  }

  @Override
  public Class<ResourcePairList> getExplorationContextOutputClass() {
    return ResourcePairList.class;
  }

  @Override
  public Class<VoidPayload> getPayloadClass() {
    return VoidPayload.class;
  }

  @Override
  public ResourcePairList apply(ResourcePairList resourcePairList, VoidPayload payload) {
    List<ResourcePair> resourcePairs = resourcePairList.streamOfResults()
        .collect(Collectors.toList());
    for (ResourcePair resource : resourcePairs) {
      resourcePairList.values().put(resource.getId(), VALUES_PTR,
          objectMapper.valueToTree(resnikSimilarityMetricService.getValueFor(resource)));
    }
    return resourcePairList;
  }
}
